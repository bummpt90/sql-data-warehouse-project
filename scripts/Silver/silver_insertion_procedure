EXEC silver.load_silver;
--Creating a procedure.
CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN

	DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;

	SET @batch_start_time  = GETDATE();

	PRINT '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';
	PRINT '>>Loading the silver layer.'
	PRINT '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++';

	SET @start_time = GETDATE();
	PRINT '>>Truncating the table:silver.crm_cust_info'
	TRUNCATE TABLE silver.crm_cust_info

	PRINT '>> Inserting data into: silver.crm_cust_info'
	INSERT INTO silver.crm_cust_info (
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_gndr,
		cst_marital_status,
		cst_create_date
	)
	SELECT
		cst_id,
		cst_key,
		TRIM(cst_firstname) cst_firstname,
		TRIM(cst_lastname) cst_lastname,
	--Converting abbreviations to Full words
		CASE
			WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
			WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
			ELSE 'Unknown'
		END cst_gndr,
		CASE
			WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
			WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
			ELSE 'Unknown'
		END cst_marital_status,
		cst_create_date
	FROM
		--subquery
		(
		SELECT
				--cst_id,
				--cst_create_date,
				*,
				ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date) flag_last
			FROM
				bronze.crm_cust_info
			WHERE cst_id IS NOT NULL
		)t
	WHERE flag_last = 1;

	SET @end_time = GETDATE();
    PRINT '>> Data inserted into silver.crm_cust_info in ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS VARCHAR) + ' seconds.';
    PRINT '============================================================';



	SET @start_time = GETDATE();
	PRINT '>>Truncating the table:silver.crm_prd_info'
	TRUNCATE TABLE silver.crm_prd_info

	PRINT '>> Inserting data into: silver.crm_prd_info'
	INSERT INTO silver.crm_prd_info (
		prd_id,
		cat_id,
		prd_key,
		prd_nm,
		prd_cost,
		prd_line,
		prd_start_dt,
		prd_end_dt
	)
	SELECT
		prd_id,
		REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,
		SUBSTRING(prd_key, 7, LEN(prd_key)) prd_key,
		prd_nm,
		ISNULL(prd_cost, 0) prd_cost,
		CASE
			WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
			WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
			WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
			WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
			ELSE 'n/a'
		END prd_line,
	--For small data
		/*CASE UPPER(TRIM(prd_line))
			WHEN 'M' THEN 'Moutain'
			WHEN 'R' THEN 'Road'
			WHEN 'S' THEN 'Other Sales'
			WHEN 'T' THEN 'Touring'
			ELSE 'n/a'
		END prd_line
	*/
		CAST(prd_start_dt AS DATE) prd_start_dt,
		CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE)	AS prd_end_dt
	FROM
		bronze.crm_prd_info

	SET @end_time = GETDATE();
	PRINT 'Data inserted into silver.crm_prd_info : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS VARCHAR) + 'seconds';
	PRINT '==========================================================';



	SET @start_time = GETDATE();
	PRINT '>>Truncating the table: silver.crm_sls_details'
	TRUNCATE TABLE silver.crm_sls_details

	PRINT '>> Inserting data into:silver.crm_sls_details'
	--3. Silver clean and insertion silver.crm_sales_details.
	INSERT INTO silver.crm_sls_details(
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales ,
		sls_quantity,
		sls_price
		)

	SELECT 
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
	--Handling invalid data and doing data casting.note: cast from integer to varchar and then to date
		CASE
			WHEN sls_order_dt = 0 OR LEN(sls_order_dt)!= 8 THEN NULL
			ELSE  CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
		END sls_order_dt,
		CASE
			WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt)!= 8 THEN NULL
			ELSE  CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
		END sls_ship_dt,
		CASE
			WHEN sls_due_dt = 0 OR LEN(sls_due_dt)!= 8 THEN NULL
			ELSE  CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
		END sls_due_dt,
	--Recalculating the sales if it does not meet business requirement. it must not be negative, zero or nulls
		CASE
			WHEN sls_sales IS NULL OR sls_sales <= 0 OR  sls_sales != sls_quantity * ABS(sls_price) THEN sls_quantity * ABS(sls_price)
			ELSE sls_sales
		END sls_sales,

		sls_quantity,

		CASE	
			WHEN sls_price IS NULL OR sls_price <= 0  THEN sls_sales/ NULLIF(sls_quantity,0)
			ELSE sls_price
		END sls_price
    
	FROM
		bronze.crm_sls_details
	SET @end_time = GETDATE();
	PRINT 'Data inserted into bronze.crm_sls_details : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS VARCHAR) + 'seconds';
	PRINT '==========================================================';


	SET @start_time = GETDATE();
	PRINT '>>Truncating the table: silver.erp_cust_az12'
	TRUNCATE TABLE silver.erp_cust_az12

	PRINT '>> Inserting data into: silver.erp_cust_az12'
	--4. Silver clean and insertion silver.erp_cust_az12
	INSERT INTO silver.erp_cust_az12 (
		cid,
		bdate,
		gen
	)

	SELECT
	--Handling missing values, extracting key to be used to combine tables.
		CASE
			WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
			ELSE cid
		END cid,
	--identify and remove out of range dates either before or after .
		CASE
			WHEN  bdate > GETDATE() THEN NULL
			ELSE bdate
		END bdate,
	--Data standardization and consistency
		CASE
			WHEN UPPER(TRIM(gen)) IN ('F', 'Female') THEN 'Female'
			WHEN UPPER(TRIM(gen)) IN ('M', 'Male') THEN 'Male'
			ELSE 'n/a'
		END gen
	FROM
		bronze.erp_cust_az12;
	SET @end_time = GETDATE();
	PRINT 'Data inserted into bronze.erp_cust_az12 : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS VARCHAR) + 'seconds';
	PRINT '==========================================================';



	SET @start_time = GETDATE();
	PRINT '>>Truncating the table: silver.erp_loc_a101'
	TRUNCATE TABLE silver.erp_loc_a101

	PRINT '>> Inserting data into: silver.erp_loc_a101'
	--5. Silver clean and insertion bronze.erp_loc_a101

	INSERT INTO silver.erp_loc_a101(
		cid,
		cntry
	)

	SELECT
	--Handle invalid values. remove dash and replace it with empty space
		REPLACE(cid, '-', ''),
	--Data Normalization and handle missing or blank country codes
		CASE
			WHEN TRIM(cntry) = 'de'	THEN 'Germany'
			WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
			WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
			ELSE TRIM(cntry)	
		END cntry
	FROM
		bronze.erp_loc_a101;
	SET @end_time = GETDATE();
	PRINT 'Data inserted into bronze.erp_loc_a101 : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS VARCHAR) + 'seconds';
	PRINT '==========================================================';



	SET @start_time = GETDATE();
	PRINT '>>Truncating the table: silver.erp_px_cat_g1v2'
	TRUNCATE TABLE silver.erp_px_cat_g1v2

	PRINT '>> Inserting data into: silver.erp_px_cat_g1v2'
	--6. Silver clean and insertion silver.erp_px_cat_g1v2

	INSERT INTO silver.erp_px_cat_g1v2(
		id,
		cat,
		subcat,
		maintenance
	)

	SELECT
		id,
		cat,
		subcat,
		maintenance
	FROM
		bronze.erp_px_cat_g1v2;
	SET @end_time = GETDATE();
	PRINT 'Data inserted into bronze.erp_px_cat_g1v2 : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS VARCHAR) + 'seconds';
	PRINT '==========================================================';


		SET @batch_end_time  = GETDATE();
		PRINT '=======================================================================';
		PRINT 'Loading the silver layer is completed.';
		PRINT '		---Total Load Time: ' + CAST(DATEDIFF(SECOND,@batch_start_time, @batch_end_time) AS NVARCHAR) + 'Seconds';
		PRINT '=======================================================================';

END



